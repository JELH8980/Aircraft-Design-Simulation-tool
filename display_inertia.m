function display_inertia(model)
% DISPLAY_INERTIA - Function to visualize the inertial geometry of a model in 3D.
%
% This function creates a 3D plot of a model’s inertial geometry, displaying the 
% convex hulls of its constituent bodies with realistic lighting and shading. It 
% includes annotations for key geometric and inertial parameters (e.g., reference 
% point R, thrust T, body B, MAC M, mass, and moments of inertia) to provide a 
% comprehensive view of the model’s physical properties.
%
% INPUTS:
%   model          - A struct containing model name (model.name), geometry data 
%                    (model.geo.bodies with points and convexhull, model.geo.patches 
%                    with symmetry flags), and parameters (lR, hR, lT, hT, aT, lB, hB, 
%                    XM, YM, ZM, S, b, c, m, Ixx, Iyy, Izz, Ixz).
%
% OUTPUT:
%   None           - Creates and displays a figure but does not return it explicitly.
%
% FUNCTIONALITY:
% - Creates a fixed-size (1200x600 pixels), centered figure titled "Inertia plot of 
%   <model.name>" with a white background and no toolbar.
% - Adds annotations for:
%   - Reference (R): lR, hR.
%   - Thrust (T): lT, hT, aT.
%   - Body (B): lB, hB.
%   - MAC (M): XM, YM, ZM.
%   - Parameters: S (area), b (span), c (chord), m (mass), Ixx, Iyy, Izz, Ixz (inertia).
% - Plots each body in model.geo.bodies as a 3D surface:
%   - Uses convex hull (K) and points shifted by lR and hR.
%   - Applies grey shading (FaceColor [0.6, 0.6, 0.6]) with Gouraud lighting, strong 
%     specular reflections, and metallic material properties.
%   - If symmetry is specified in model.geo.patches, mirrors the body across the Y=0 
%     plane with a slightly lighter grey ([0.7, 0.7, 0.7]).
% - Enhances visualization with multiple light sources (headlight, left, right), 
%   Phong lighting, and a minor grid.
% - Enables 3D rotation and sets equal axes for accurate proportions.
%
% NOTES:
% - Units: Meters (m) for distances, degrees (deg) for thrust angle (aT), kilograms 
%   (kg) for mass, and kg*m^2 for moments of inertia (assumed from context).
% - The figure is non-resizable to maintain consistent layout.
% - Symmetry is conditionally applied based on model.geo.patches.<body_name>.symmetry.
% - Does not return the figure handle despite creating it (consider adding fig as output).
%
% Author: Ludwig Horvath
% Date: 3/17/2025

figure_name = append('Inertia plot of ', model.name);

 % Refine fixed figure size (in pixels)
fig_width = 1200;  
fig_height = 600;  
screen_size = get(0, 'ScreenSize'); % Get screen size

% Center the figure on screen
fig_left = (screen_size(3) - fig_width) / 2;
fig_bottom = (screen_size(4) - fig_height) / 2;


% Create fixed-size figure
fig = figure('Name', figure_name, ...
      'Position', [fig_left, fig_bottom, fig_width, fig_height], ...
      'Resize', 'off', ...  % Prevent resizing
      'Toolbar', 'none', 'Menubar', 'figure', ...
       'Color', 'white');


axes('Parent', fig, 'Position', [0, 0.1, 0.8, 0.8]); 

hold on
axis equal
view(3) % 3D perspective

%% Information


    annotation("textbox", "String", "Reference (R) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.1, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');

    annotation("textbox", "String", append('lR: ', num2str(round(model.parameters.lR, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.1, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('hR: ',num2str(round(model.parameters.hR, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.1, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    
    annotation("textbox", "String", "Thrust (T) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('lT: ', num2str(round(model.parameters.lT, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('hT: ',num2str(round(model.parameters.hT, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('aT: ', num2str(round(model.parameters.aT, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.78, 0.1, 0.1], ...
               "EdgeColor", 'white');


    annotation("textbox", "String", "Body (B) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.5, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('lB: ', num2str(round(model.parameters.lB, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.5, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    
    annotation("textbox", "String", append('hB: ',num2str(round(model.parameters.hB, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.5, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    
    annotation("textbox", "String", "MAC (M) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('XM: ', num2str(round(model.parameters.XM, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('YM: ',num2str(round(model.parameters.YM, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('ZM: ',num2str(round(model.parameters.ZM, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.78, 0.1, 0.1], ...
               "EdgeColor", 'white');


    
    annotation("textbox", "String", "Parameters ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('S: ', num2str(round(model.parameters.S, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('b: ',num2str(round(model.parameters.b, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('c: ',num2str(round(model.parameters.c, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.78, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('m: ',num2str(round(model.parameters.m, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.74, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Ixx: ',num2str(round(model.parameters.Ixx, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.70, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Iyy: ',num2str(round(model.parameters.Iyy, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.66, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Izz: ',num2str(round(model.parameters.Izz, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.62, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Ixz: ',num2str(round(model.parameters.Ixz, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.58, 0.1, 0.1], ...
               "EdgeColor", 'white');

%% Plotting Bodies



bodies_names = fields(model.geo.bodies);
no_bodies = numel(bodies_names);


for i = 1:no_bodies
    body_name = bodies_names{i};
    K = model.geo.bodies.(body_name).convexhull;
    points = model.geo.bodies.(body_name).points;


    trisurf(K, points(:,1)+ model.parameters.lR, points(:,2)+ 0, points(:,3)+ model.parameters.hR, ...
        'FaceColor', [0.6, 0.6, 0.6], ... % Slightly brighter grey
        'EdgeColor', 'none', ...
        'FaceLighting', 'gouraud', ...
        'SpecularStrength', 1.0, ...  % Stronger reflections
        'SpecularExponent', 50, ...   % Sharper highlights
        'AmbientStrength', 0.5);      % More ambient light

    if isfield(model.geo.patches, body_name) && model.geo.patches.(body_name).symmetry
        points_anti = points;
        points_anti(:,2) = -points_anti(:,2);
        [Kanti, ~] = convhull(points_anti);

        trisurf(Kanti, points_anti(:,1) + model.parameters.lR, points_anti(:,2), points_anti(:,3) + model.parameters.hR, ...
            'FaceColor', [0.7, 0.7, 0.7], ... % Slightly different grey
            'EdgeColor', 'none', ...
            'FaceLighting', 'gouraud', ...
            'SpecularStrength', 1.0, ...
            'SpecularExponent', 50, ...
            'AmbientStrength', 0.5);
    end


end


% Add multiple light sources for better illumination
camlight('headlight')  % Light follows camera
camlight left          % Additional light from left
camlight right         % Additional light from right
lighting phong         % Smooth shading
material metal         % Metallic shine

grid minor


rotate3d on

end

