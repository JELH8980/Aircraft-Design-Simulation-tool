function [fig] = display_geometry(model, label_patches)
% DISPLAY_GEOMETRY - Function to visualize the flat geometry of a model.
%
% This function creates a 3D visualization of a modelâ€™s geometry, displaying its 
% mesh outline with optional patch numbering or annotated reference points, 
% thrust vector, and mean aerodynamic chord (MAC). It offers two modes: one for 
% labeling mesh patches with indices and another for showing detailed geometric 
% parameters (e.g., reference point R, thrust T, body B, MAC M) alongside a legend.
%
% INPUTS:
%   model          - A struct containing geometry data (model.geo.mesh), model name 
%                    (model.name), and parameters (lR, hR, lT, hT, aT, lB, hB, XM, YM, 
%                    ZM, S, b, c, m, Ixx, Iyy, Izz, Ixz).
%   label_patches  - Boolean flag: true to label mesh patches with numbers, false 
%                    to display annotated parameters and markers.
%
% OUTPUT:
%   fig            - Handle to the created figure object.
%
% FUNCTIONALITY:
% - Creates a fixed-size (800x600 pixels), centered figure with the title "Flat 
%   geometry of <model.name>".
% - Extracts the mesh from model.geo.mesh and adjusts coordinates with offsets 
%   (lR, hR).
% - If label_patches is true:
%   - Plots the mesh outline and labels each patch with its index at its centroid.
% - If label_patches is false:
%   - Plots the mesh outline, reference point (R), thrust point (T) with direction 
%     vector, body point (B) if valid, MAC line, and origin (G).
%   - Adds annotations for geometric parameters (R: lR, hR; T: lT, hT, aT; B: lB, hB; 
%     M: XM, ZM) and physical properties (S, b, c, m, Ixx, Iyy, Izz, Ixz).
%   - Includes a legend with color-coded markers for M, R, G, T, and B.
% - Enables 3D rotation, sets equal axes, and labels axes in meters (X, Y, Z).
%
% NOTES:
% - Units: Meters (m) for distances, degrees (deg) for thrust angle (aT).
% - The figure is non-resizable with a white background and no toolbar for a clean view.
% - Mesh is plotted with no face color and thin lines (LineWidth 0.1) for clarity.
% - Checks for NaN values in lB, hB to conditionally plot the body point (B).
% - Assumes model.geo.mesh is a 3D array with dimensions [patches, vertices, 3].
%
% Author: Ludwig Horvath
% Date: 3/17/2025

figure_name = append('Flat geometry of ', model.name);

% Refine fixed figure size (in pixels)
fig_width = 800;  
fig_height = 600;  
screen_size = get(0, 'ScreenSize'); % Get screen size

% Center the figure on screen
fig_left = (screen_size(3) - fig_width) / 2;
fig_bottom = (screen_size(4) - fig_height) / 2;


% Create fixed-size figure
fig = figure('Name', figure_name, ...
             'Position', [fig_left, fig_bottom, fig_width, fig_height], ...
             'Resize', 'off', ...  % Prevent resizing
             'Toolbar', 'none', 'Menubar', 'figure', ...
             'Color', 'white');



%Changing variables to plot only partition outline
mesh = model.geo.mesh;

no_patches = size(mesh.XYZ, 1);

if label_patches

    g = fill3(mesh.XYZ(:,:,1)' + model.parameters.lR, mesh.XYZ(:,:,2)'+ 0, mesh.XYZ(:,:,3)'+ model.parameters.hR, 'w'); % Set to white or any placeholder  
    set(g, 'FaceColor', 'none', 'LineWidth', 0.1);


    axis equal,hold on, rotate3d on
    
    for i=1:no_patches
        
        patchX = mesh.XYZ(i,:,1) + model.parameters.lR;

        patchY = mesh.XYZ(i,:,2) + 0;

        patchZ = mesh.XYZ(i,:,3) + model.parameters.hR;

        centroidX = mean(patchX);

        centroidY = mean(patchY);

        centroidZ = mean(patchZ);

        text(centroidX, centroidY, centroidZ, string(i), "FontSize", 8, 'Color', 'red');
    end

else


    annotation("textbox", "String", "Reference (R) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.1, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');

    annotation("textbox", "String", append('lR: ', num2str(round(model.parameters.lR, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.1, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('hR: ',num2str(round(model.parameters.hR, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.1, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    
    annotation("textbox", "String", "Thrust (T) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('lT: ', num2str(round(model.parameters.lT, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
     
    annotation("textbox", "String", append('hT: ',num2str(round(model.parameters.hT, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('aT: ', num2str(round(model.parameters.aT, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.3, 0.78, 0.1, 0.1], ...
               "EdgeColor", 'white');


    annotation("textbox", "String", "Body (B) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.5, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('lB: ', num2str(round(model.parameters.lB, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.5, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('hB: ',num2str(round(model.parameters.hB, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.5, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    
    annotation("textbox", "String", "MAC (M) ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('XM: ', num2str(round(model.parameters.XM, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('ZM: ',num2str(round(model.parameters.ZM, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.7, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');


    
    annotation("textbox", "String", "Parameters ", ... 
               "FontSize", 10, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.9, 0.1, 0.1], ...
               "EdgeColor", 'white', 'FontWeight','bold');
    
    annotation("textbox", "String", append('S: ', num2str(round(model.parameters.S, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.86, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('b: ',num2str(round(model.parameters.b, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.82, 0.1, 0.1], ...
               "EdgeColor", 'white');
    
    annotation("textbox", "String", append('c: ',num2str(round(model.parameters.c, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.78, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('m: ',num2str(round(model.parameters.m, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.74, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Ixx: ',num2str(round(model.parameters.Ixx, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.70, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Iyy: ',num2str(round(model.parameters.Iyy, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.66, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Izz: ',num2str(round(model.parameters.Izz, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.62, 0.1, 0.1], ...
               "EdgeColor", 'white');

    annotation("textbox", "String", append('Ixz: ',num2str(round(model.parameters.Ixz, 4))), ...
               "FontSize", 8, ...
               "FitBoxToText", 'on', ...
               "Position", [0.85, 0.58, 0.1, 0.1], ...
               "EdgeColor", 'white');



    fill3(mesh.XYZ(:,:,1)' + model.parameters.lR, mesh.XYZ(:,:,2)' + 0, mesh.XYZ(:,:,3)' + model.parameters.hR, 'w', 'FaceColor', 'none', 'LineWidth', 0.1);
    axis equal,hold on, rotate3d on

    axis equal,hold on, rotate3d on
    xlabel('X [m]')
    ylabel('Y [m]')
    zlabel('Z [m]')
    grid on
    
    plot3(0, 0, 0, 'gx', 'MarkerSize',10,'linewidth',1);
    plot3(0, 0, 0, 'go', 'MarkerSize',10,'linewidth',1);
    
    if ~any(isnan([model.parameters.lB, 0, model.parameters.hB]))
        plot3(model.parameters.lB,0, model.parameters.hB,'ko', 'MarkerSize',12,'linewidth',2, 'MarkerFaceColor', 'white');
        plot3(model.parameters.lB,0, model.parameters.hB,'k+', 'MarkerSize',12,'linewidth',2);
    end

    plot3(model.parameters.lR,0,model.parameters.hR,'rx', 'MarkerSize',10,'linewidth',1);
    plot3(model.parameters.lR,0,model.parameters.hR,'ro', 'MarkerSize',10,'linewidth',1);

    plot3(model.parameters.lT, 0, model.parameters.hT, 'ko', 'MarkerSize',10,'linewidth',1);

    quiver3(model.parameters.lT, 0, model.parameters.hT, ...
                 -2 * cos(model.parameters.aT), 0, -2 * sin(model.parameters.aT), ...
                  'Color', 'k', 'LineWidth', 1, 'MaxHeadSize', 1);

    line([model.parameters.XM model.parameters.XM+model.parameters.c],[model.parameters.YM model.parameters.YM],[model.parameters.ZM model.parameters.ZM], 'LineWidth',5, 'Color', 'b');
        
     
    %plotting legend
    L=gca;
    set(L,'Position',[0.1 0.1 0.6 0.8]);
    axes('position',[0.1 0.1 0.8 0.1]);
    axis([0 1 0 1])
    hold on

    line([0.1 0.2],[0 0], 'LineWidth',6, 'Color', 'b');
    
    plot(0.35,0,'rx', 'MarkerSize',10,'linewidth',1);
    plot(0.35,0,'ro', 'MarkerSize',10,'linewidth',1);

    plot(0.5,0,'gx', 'MarkerSize',10,'linewidth',1);
    plot(0.5,0,'go', 'MarkerSize',10,'linewidth',1);
   
    

    plot(0.65,0,'ko', 'MarkerSize',10,'linewidth',1);


    
    text(0.25,0,'M');
    text(0.4,0,'R');
    text(0.55,0,'G');
    text(0.7,0,'T');

    if ~any(isnan([model.parameters.lB, model.parameters.hB]))
        plot(0.8,0,'ko', 'MarkerSize',12,'linewidth',2, 'MarkerFaceColor', 'white');
        plot(0.8,0,'k+', 'MarkerSize',12,'linewidth',2);
        text(0.85,0, 'B')
    end
    
    axis off

end





